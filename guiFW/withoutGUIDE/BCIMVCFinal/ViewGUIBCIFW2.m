classdef ViewGUIBCIFW2
    properties
        gui
        model
        controller      
    end
    methods
        function hSelf= ViewGUIBCIFW2(controller)
            hSelf.controller = controller;
            hSelf.model=controller.model;
            hSelf.gui=GUIBCIFW2(controller);
            
            %----------------------Data------------------------------------
            addlistener(hSelf.model,'behavioralData','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPbNeuralBehavListener(hSelf,src,evnt));
            
            %----------------------FeaturesExtraction----------------------
            %hPopupFeatExtOfflineCallback
            addlistener(hSelf.model,'selectedFeatExtAlgo','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupFeatExtOfflineListener(hSelf,src,evnt));
            
            addlistener(hSelf.model,'selectedFeatExtParamSettingMode','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupFeatExtParamSettingsModesListener(hSelf,src,evnt));
            %---------------------FeaturesReduction------------------------
            addlistener(hSelf.model,'selectedFeatRedAlgo','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupFeatRedOfflineListener(hSelf,src,evnt));
            
            addlistener(hSelf.model,'selectedFeatRedParamSettingMode','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupFeatRedParamSettingsModesListener(hSelf,src,evnt));
            %---------------------Decoder----------------------------------
            addlistener(hSelf.model,'selectedDecoMod','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupTaskTypeListener(hSelf,src,evnt));
            
            addlistener(hSelf.model,'selectedDecoAlgo','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupDecoAlgoListener(hSelf,src,evnt));
            
            addlistener(hSelf.model,'selectedTrainDecoParamSettingMode','PostSet', ...
                @(src,evnt)ViewGUIBCIFW2.hPopupTrainDecoParamSettingsModesListener(hSelf,src,evnt));
            
            
            %---------------------------TestFig----------------------------

            
            
            
        end
        
    end
    methods (Static)
        
        %------------------------------------------------------------------
        %--------------------Data tab--------------------------------------
        %------------------------------------------------------------------
        function hPbNeuralBehavListener(hSelf,src,evnt)
            trialEvents=hSelf.model.behavioralData.saveData.Trial_Events;
             set(hSelf.gui.hPopupStartEvent,...
                 'String',trialEvents)
             set(hSelf.gui.hPopupEndEvent, ...
                 'String',trialEvents)           
        end % end: function hPbNeuralBehavListener
        
        %------------------------------------------------------------------
        %---------------FeatExt&Red----------------------------------------
        %------------------------------------------------------------------
        function hPopupFeatExtOfflineListener(hSelf,src,evnt)
            featExtAlgos= get(hSelf.gui.hPopupFeatExtOffline,'String');
            selectedAlgoInd=get(hSelf.gui.hPopupFeatExtOffline,'Value');
            selectedAlgoName =featExtAlgos{selectedAlgoInd};
            
            set(hSelf.gui.hPopupFeatExtParamSettingsModes,...
                'String',{'Default','Customize'})
            
            switch selectedAlgoName
                case 'SortedSpikes'
                    set(hSelf.gui.hPopupPlotRawFeatExt,...
                        'String',{'SortedSpikes','UnsortedSpikes'});
                    set(hSelf.gui.hTxtEvalDataParam1,...
                        'String','Neural(Spikes)&BehavData');
                    set(hSelf.gui.hPbEvalRawData,...
                        'String','PlotRaw(Spikes)Data');
                    set(hSelf.gui.hPbEvalFeatExtRed, ...
                        'String','ExtractFeatures (SortedSpikes)')
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',{'SortedSpikes'})
                case 'UnsortedSpikes'
                    set(hSelf.gui.hPopupPlotRawFeatExt,...
                        'String',{'UnsortedSpikes'});
                    set(hSelf.gui.hTxtEvalDataParam1,...
                        'String','Neural(Spikes)&BehavData');
                    set(hSelf.gui.hPbEvalRawData,...
                        'String','PlotRaw(Spikes)Data')
                    set(hSelf.gui.hPbEvalFeatExtRed, ...
                        'String','ExtractFeatures (UnsortedSpikes)')
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',{'UnsortedSpikes'})
                case 'LocalFieldPotential(LFP)'
                    set(hSelf.gui.hPopupPlotRawFeatExt,...
                        'String',{'RawECoG','LocalFieldPotential'})
                    set(hSelf.gui.hTxtEvalDataParam1,...
                        'String','Neural(ECoG)&BehavData')
                    set(hSelf.gui.hPbEvalRawData,...
                        'String','PlotRaw(ECoG)Data')
                    set(hSelf.gui.hPbEvalFeatExtRed, ...
                        'String','ExtractFeatures (LFP)')
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',{'LFP Features'})
                case 'ConvolutionalStackedAuto-Encoders'
                    set(hSelf.gui.hPopupPlotRawFeatExt,...
                        'String', {'RawEcog','CSAFeatures'})
                    set(hSelf.gui.hTxtEvalDataParam1,...
                        'String','Neural(ECoG)&BehavData')
                    set(hSelf.gui.hPbEvalRawData,...
                        'String','PlotRaw(ECoG)Data')
                    set(hSelf.gui.hPbEvalFeatExtRed, ...
                        'String','ExtractFeatures (CSA)')
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',{'CSA Features'})
                    
                    
            end
            
        end
        %------------------------------------------------------------------
        function hPopupFeatExtParamSettingsModesListener(hSelf, src, event)
            
             availModes= get(hSelf.gui.hPopupFeatExtParamSettingsModes,'String');
             selectedModeInd=get(hSelf.gui.hPopupFeatExtParamSettingsModes,'Value');
             selectedModeName =availModes{selectedModeInd};
             
             featExtAlgos= get(hSelf.gui.hPopupFeatExtOffline,'String');
             selectedAlgoInd=get(hSelf.gui.hPopupFeatExtOffline,'Value');
             selectedAlgoName =featExtAlgos{selectedAlgoInd};
             
             switch selectedModeName
                 case 'Customize'
                     switch selectedAlgoName
                        case 'SortedSpikes'
                            set(hSelf.gui.hTxtCustomFeatExtParam,...
                                'String','Paramters: SortedSpikes')
                            set(hSelf.gui.hTxtCustomFeatExtParam1,...
                                'String','Param1:SS')
                        case 'UnsortedSpikes'
                            set(hSelf.gui.hTxtCustomFeatExtParam,...
                                'String','Paramters: UnsortedSpikes')
                            set(hSelf.gui.hTxtCustomFeatExtParam1,...
                                'String','Param1:US')
                        case 'LocalFieldPotential(LFP)'
                            set(hSelf.gui.hTxtCustomFeatExtParam,...
                                'String','Paramters: LFP')
                            set(hSelf.gui.hTxtCustomFeatExtParam1,...
                                'String','Param1:LFP')
                        case 'ConvolutionalStackedAuto-Encoders'
                            set(hSelf.gui.hTxtCustomFeatExtParam,...
                                'String','Paramters: CSA')
                            set(hSelf.gui.hTxtCustomFeatExtParam1,...
                                'String','Param1:CSA')
                     end
             end                            
        end % end: hPopupFeatExtParamSettingsModesListener
        %------------------------------------------------------------------
        function hPopupFeatRedOfflineListener(hSelf,src,evnt)
            
            featRedAlgos= get(hSelf.gui.hPopupFeatRedOffline,'String');
            selectedAlgoInd=get(hSelf.gui.hPopupFeatRedOffline,'Value');
            selectedAlgoName =featRedAlgos{selectedAlgoInd};
            set(hSelf.gui.hPopupFeatRedParamSettingsModes,...
                'String',{'Default','Customize'})
            switch selectedAlgoName
                case 'Principal Componenet Analysis(PCA)'
                    set(hSelf.gui.hPopupPlotFeatRed,...
                        'String',{'PCA:2-D','PCA:3-D'});
                    
                    ViewGUIBCIFW2.hPopupFeatExtOfflineListener(hSelf,src,evnt);
                    %calling the staticmethod to clear the popup: hPopupEValVisualFeat
                    %former strin value
                    selectedFeatExtAlgoPlot=get(hSelf.gui.hPopupEValVisualFeat,'String');
                    selectedFeatRedAlgosPlot=get(hSelf.gui.hPopupPlotFeatRed,'String');
                    StringPlotFeatExtRed=[selectedFeatExtAlgoPlot;selectedFeatRedAlgosPlot];
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',StringPlotFeatExtRed);
                case 'Independent Component Analysis(ICA)'
                    set(hSelf.gui.hPopupPlotFeatRed,...
                        'String',{'----------------'});
                     ViewGUIBCIFW2.hPopupFeatExtOfflineListener(hSelf,src,evnt);
                    %calling the staticmethod to clear the popup: hPopupEValVisualFeat
                    %former strin value
                    
                    selectedFeatExtAlgoPlot=get(hSelf.gui.hPopupEValVisualFeat,'String');
                    selectedFeatRedAlgosPlot=get(hSelf.gui.hPopupPlotFeatRed,'String');
                    StringPlotFeatExtRed=[selectedFeatExtAlgoPlot;selectedFeatRedAlgosPlot];
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',StringPlotFeatExtRed);
                case 'Restricted Boltzman Machine(RBM)'
                    set(hSelf.gui.hPopupPlotFeatRed,...
                        'String',{'----------------'});
                     ViewGUIBCIFW2.hPopupFeatExtOfflineListener(hSelf,src,evnt);
                    %calling the staticmethod to clear the popup: hPopupEValVisualFeat
                    %former strin value
                    selectedFeatExtAlgoPlot=get(hSelf.gui.hPopupEValVisualFeat,'String');
                    selectedFeatRedAlgosPlot=get(hSelf.gui.hPopupPlotFeatRed,'String');
                    StringPlotFeatExtRed=[selectedFeatExtAlgoPlot;selectedFeatRedAlgosPlot];
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',StringPlotFeatExtRed);
                case 'Auto-Encoders'
                   set(hSelf.gui.hPopupPlotFeatRed,...
                        'String',{'----------------'});
                    ViewGUIBCIFW2.hPopupFeatExtOfflineListener(hSelf,src,evnt);
                    %calling the staticmethod to clear the popup: hPopupEValVisualFeat
                    %former strin value
                    selectedFeatExtAlgoPlot=get(hSelf.gui.hPopupEValVisualFeat,'String');
                    selectedFeatRedAlgosPlot=get(hSelf.gui.hPopupPlotFeatRed,'String');
                    StringPlotFeatExtRed=[selectedFeatExtAlgoPlot;selectedFeatRedAlgosPlot];
                    set(hSelf.gui.hPopupEValVisualFeat,...
                        'String',StringPlotFeatExtRed);
            end
            
        end %end function hPopupFeatRedOfflineListener
        function hPopupFeatRedParamSettingsModesListener(hSelf,src,evnt)
             availModes= get(hSelf.gui.hPopupFeatRedParamSettingsModes,'String');
             selectedModeInd=get(hSelf.gui.hPopupFeatRedParamSettingsModes,'Value');
             selectedModeName =availModes{selectedModeInd};
             
             featRedAlgos= get(hSelf.gui.hPopupFeatRedOffline,'String');
             selectedAlgoInd=get(hSelf.gui.hPopupFeatRedOffline,'Value');
             selectedAlgoName =featRedAlgos{selectedAlgoInd};
             
             switch selectedModeName
                 case 'Customize'
                     switch selectedAlgoName
                        case 'Principal Componenet Analysis(PCA)'
                            set(hSelf.gui.hTxtCustomFeatRedParam,...
                                'String','Parameters: PCA',...
                                'FontSize', 12, ...
                                'FontWeight','bold')
                            set(hSelf.gui.hTxtCustomFeatRedParam1,...
                                'String','Maintain Variabilty')
                            set(hSelf.gui.tTxtCustomFeatRedParam12,...
                                'String', '%', ...
                                'FontSize', 10)
                            set(hSelf.gui.hTxtCustomDataDistRatio, ...
                                'String','Data Distribution Ratio',...
                                'FontSize', 12, ...
                                'FontWeight','bold')
                            set(hSelf.gui.hTxtCustomDataDistRatioParam1,...
                                'String','Training Data')
                            set(hSelf.gui.hTxtCustomDataDistRatioParam12,...
                                'String', '%', ...
                                'FontSize', 10);
                            
                            
                        case 'Independent Component Analysis(ICA)'
                            set(hSelf.gui.hTxtCustomFeatRedParam,...
                                'String','Paramters: ICA')
                            set(hSelf.gui.hTxtCustomFeatRedParam1,...
                                'String','Param1:ICA')
                        case 'Restricted Boltzman Machine(RBM)'
                            set(hSelf.gui.hTxtCustomFeatRedParam,...
                                'String','Paramters: RBM')
                            set(hSelf.gui.hTxtCustomFeatRedParam1,...
                                'String','Param1:RBM')
                        case 'Auto-Encoders'
                            set(hSelf.gui.hTxtCustomFeatRedParam,...
                                'String','Paramters: AE')
                            set(hSelf.gui.hTxtCustomFeatRedParam1,...
                                'String','Param1:AE')
                     end
             end                            
        end
        
        %------------------------------------------------------------------
        %-----------------------Decoder------------------------------------
        %------------------------------------------------------------------
        
        function hPopupTaskTypeListener(hSelf,src,evnt)
            trialTypes= get(hSelf.gui.hPopupTaskType,'String');
            selectedTypeInd=get(hSelf.gui.hPopupTaskType,'Value');
            selectedAlgoName =trialTypes{selectedTypeInd};
            
            fid = fopen('configBCIFW2.m','r'); %open configuration file
            cmdStringMatrix = fscanf(fid,'%c'); %read whole text from Matlab
            fclose(fid);
            eval(cmdStringMatrix);
            
            switch selectedAlgoName
                case 'Classification'
                    
                    if exist('decoAlgoC','var') && iscell(decoAlgoC)
                        set(hSelf.gui.hPopupDecoAlgo,...
                        'String',decoAlgoC)
                    end
                    
                    set(hSelf.gui.hTxtDecoAlgo,...
                        'String','Classifiers')
                    
                case 'Regression'
                    
                    if exist('decoAlgoC','var') && iscell(decoAlgoR)
                        set(hSelf.gui.hPopupDecoAlgo,...
                            'String',decoAlgoR)
                    end
                    
                    set(hSelf.gui.hTxtDecoAlgo,...
                        'String','Regressors')                                                            
            end
            
        end %end function hPopupTaskTypeListener
        
        function hPopupDecoAlgoListener(hSelf,src,evnt)
            decoAlgos= get(hSelf.gui.hPopupDecoAlgo,'String');
            selectedAlgoInd=get(hSelf.gui.hPopupDecoAlgo,'Value');
            selectedDecoAlgoName =decoAlgos{selectedAlgoInd};
            
            trialTypes= get(hSelf.gui.hPopupTaskType,'String');
            selectedTypeInd=get(hSelf.gui.hPopupTaskType,'Value');
            selectedDecoModName =trialTypes{selectedTypeInd};
            set(hSelf.gui.hPopupTrainDecoParamSettingsModes,...
                'String',{'Default','Customize'})
            
            switch selectedDecoModName
                case 'Classification'
                    set(hSelf.gui.hPopupEvalTestVisPer,...
                        'String', {'TestAccuracy','Train,Val,Test Accuracy',...
                        'ConfusionMatrix(Test)','ConfusionMatrix(Train,Test,Val)'})
                    set(hSelf.gui.hPopupDecoPer, ...
                        'String', {'Accuracy(Train,Val,Test)',...
                        'ConfusionMatrix(Train,Val,Test)'})
                    switch selectedDecoAlgoName
                        case 'NeuralNetworksC'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                'String','TestModel(NNc)')
                            %ViewGUIBCIFW2.hPopupTrainDecoParamSettingsModesListener(hSelf,src,evnt)
                                    
                        case 'LinearRegressionC'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                        'String','TestModel(LinRc)')
                        case 'LogisticRegressionC'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                        'String','TestModel(LogRc)')
                    end
                case 'Regression'
                     set(hSelf.gui.hPopupEvalTestVisPer,...
                        'String', {'ReconstructionAccuracy(Test)','ReconstructionAccuracy(Test,Train,Val)',...
                        'Reconstruction(Test)','Reconstruction(Test,Train,Val)'})
                    set(hSelf.gui.hPopupDecoPer, ...
                        'String', {'ReconstructionAccuracy(Test)','ReconstructionAccuracy(Test,Train,Val)',...
                        'Reconstruction(Test)','Reconstruction(Test,Train,Val)'})
                    switch selectedDecoAlgoName
                        case 'NeuralNetworksR'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                        'String','TestModel(NNr)')
                        case 'LinearRegressionR'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                'String','TestModel(LinRr)')
                        case 'LogisticRegressionR'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                        'String','TestModel(LogRr)')
                        case 'RecurrentNeuralNetworks'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                'String','TestModel(RCNNr)')
                        case 'KalmanFilters'
                            set(hSelf.gui.hPbEvalTestDeco, ...
                                        'String','TestModel(KFr)')
                            

                    end
            end
            

            
            
%             set(hSelf.gui.hPopupTrainDecoParamSettingsModes,...
%                 'String',{'Default','Customize'})
            

         end %end function hPopupDecoAlgoListener

        function hPopupTrainDecoParamSettingsModesListener(hSelf,src,evnt)
            %------------------------------------------------Wait
            decoAlgos= get(hSelf.gui.hPopupDecoAlgo,'String');
            selectedAlgoInd=get(hSelf.gui.hPopupDecoAlgo,'Value');
            selectedDecoAlgoName =decoAlgos{selectedAlgoInd};
            
            trialTypes= get(hSelf.gui.hPopupTaskType,'String');
            selectedTypeInd=get(hSelf.gui.hPopupTaskType,'Value');
            selectedDecoModName =trialTypes{selectedTypeInd};
            
            availSettings= get(hSelf.gui.hPopupTrainDecoParamSettingsModes,'String');
            selectedSettingInd=get(hSelf.gui.hPopupTrainDecoParamSettingsModes,'Value');
            selectedSettingName =availSettings{selectedSettingInd};
            
            switch selectedSettingName
                case 'Customize'
                    switch selectedDecoModName
                        case 'Classification'
                            switch selectedDecoAlgoName
                                case 'NeuralNetworksC'
                                   
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'Classification:NeuralNetwork');
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','Layers');
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','[]');
                                    
                                    
                                case 'LinearRegressionC'
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'LinearRegressionC');
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','No. Of Neurons');
                                    
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','');
                                    
                                    
                                case 'LogisticRegressionC'
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'LogisticRegressionC');
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','No. Of Neurons');
                                    
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','');
                                    

                                
                                    
                            end
                        case 'Regression'
                            
                            switch selectedDecoAlgoName
                                case 'NeuralNetworksR'
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'NeuralNetworkR');
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','Layers');
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','[]');
                                    

                                case 'LinearRegressionR'
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'LinearRegressionR');
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','No. Of Neurons');
                                    
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','');

                                    
                                case 'LogisticRegressionR'
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'LogisticRegressionR');
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','No. Of Neurons');
                                    
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','');
                                    
                                    
                                case 'RecurrentNeuralNetworks'
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'RecurrentNeuralNetworks');
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','-------------');
                                    
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','');

                                case 'KalmanFilters'
                                    set(hSelf.gui.hTxtCustomTrainDecoParam, ...
                                        'Visible','on',...
                                        'String', 'KalmanFilter');
                                    
                                    set(hSelf.gui.hTxtCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','-------------');
                                    
                                    set(hSelf.gui.hEditCustomTrainDecoParam1, ...
                                        'Visible','on',...
                                        'String','');
                                    

                            end
                            
                    end
                    
            end
        end
        
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%TestFig%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         function hPopupEvalModeListener(hSelf,src,evnt)
%             evalModes= get(hSelf.gui.hPopupEvalMode,'String');
%             selectedModeInd=get(hSelf.gui.hPopupEvalMode,'Value');
%             selectedEvalModeName= evalModes{selectedModeInd};
%             
%             featExtMethods = get(hSelf.gui.hPopupFeatExtOffline,'String');
%             selectedFeatExtInd=get(hSelf.gui.hPopupFeatExtOffline,'Value');
%             selectedFeatExtMethodName= featExtMethods{selectedFeatExtInd};
%             
%             switch selectedEvalModeName
%                 case 'Offline'
%                     switch selectedFeatExtMethodName
%                         case 'SortedSpikes'
%                             msgbox('1)Select.NEV neural File & corresponding Behavioral Data')
%                             set(hSelf.gui.hTxtEvalDataParam1, ...
%                                 'Visible','on',...
%                                 'String', 'Neural(Spikes)&BehavData')
%                             set(hSelf.gui.hPbEvalDataParam1, ...
%                                 'Visible','on', ...
%                                 'String', 'Browse')
%                             set(hSelf.gui.hTxtEvalDataParam2, ...
%                                 'Visible','on', ...
%                                 'String', 'TrailIndices')
%                             set(hSelf.gui.hEditEvalDataParam2, ...
%                                 'Visible','on', ...
%                                 'String','[ ]')
%                             set(hSelf.gui.hPbEvalRawData, ...
%                                 'Visible','on', ...
%                                 'Enable','on', ...
%                                 'String','PlotRawData(SortedSpikes)')
%                             set(hSelf.gui.hPbEvalFeatExtRed,...
%                                 'Visible', 'on', ...
%                                 'Enable','on', ...
%                                 'String','ExtractSortedFeatures')
%                             set(hSelf.gui.hPbEvalExtFeatVis, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on', ...
%                                 'String','Show:SortedSpikes')
%                             set(hSelf.gui.hPbEvalFeatRed2DVis, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on', ...
%                                 'String','FeaturesSpace:2D')
%                             set(hSelf.gui.hPbEvalFeatRed3DVis, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on', ...
%                                 'String','FeaturesSpace:3D')
%                             
% 
%                             set(hSelf.gui.hPbEvalTestDeco, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             
%                             set(hSelf.gui.hPbEvalTestAcc, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalTrainValTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalConfMatTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalConfMatTrainValTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             
% 
% %                             a=get(hSelf.model.selectedDecoAlgo,'String');
%                             
%                         case 'UnsortedSpikes'
%                             msgbox('1)Select.NEV neural File & corresponding Behavioral Data')
%                             set(hSelf.gui.hTxtEvalDataParam1, ...
%                                 'Visible','on',...
%                                 'String', 'Neural(Spikes)&BehavData')
%                             set(hSelf.gui.hPbEvalDataParam1, ...
%                                 'Visible','on', ...
%                                 'String', 'Browse')
%                             set(hSelf.gui.hTxtEvalDataParam2, ...
%                                 'Visible','on', ...
%                                 'String', 'TrailIndices')
%                             set(hSelf.gui.hEditEvalDataParam2, ...
%                                 'Visible','on', ...
%                                 'String','[ ]')
%                             set(hSelf.gui.hPbEvalRawData, ...
%                                 'Visible','on', ...
%                                 'Enable','on', ...
%                                 'String','PlotRawData(UnsortedSpikes)')
%                             set(hSelf.gui.hPbEvalFeatExtRed,...
%                                 'Visible', 'on', ...
%                                 'Enable','on', ...
%                                 'String','ExtractUnsortedFeatures')
%                             set(hSelf.gui.hPbEvalExtFeatVis, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on', ...
%                                 'String','Show:UnsortedSpikes')
%                             set(hSelf.gui.hPbEvalTestDeco, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalTestAcc, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalTrainValTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalConfMatTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalConfMatTrainValTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
% 
%                             
%                             
%                             
%                             
%                         case 'LocalFieldPotential(LFP)'
%                             msgbox('For Now, Select only "SoretdSpikes" or "UnsortedSpikes"')
%                             set(hSelf.gui.hTxtEvalDataParam1, ...
%                                 'Visible','off',...
%                                 'String', 'Neural(Spikes)&BehavData')
%                             set(hSelf.gui.hPbEvalDataParam1, ...
%                                 'Visible','off', ...
%                                 'String', 'Browse')
%                             set(hSelf.gui.hTxtEvalDataParam2, ...
%                                 'Visible','off', ...
%                                 'String', 'TrailIndices')
%                             set(hSelf.gui.hEditEvalDataParam2, ...
%                                 'Visible','off', ...
%                                 'String','[ ]')
%                             set(hSelf.gui.hPbEvalRawData, ...
%                                 'Visible','off', ...
%                                 'Enable','off', ...
%                                 'String','PlotRawData(UnsortedSpikes)')
%                             set(hSelf.gui.hPbEvalFeatExtRed,...
%                                 'Visible', 'off', ...
%                                 'Enable','on', ...
%                                 'String','ExtractLFPFeatures')
%                             set(hSelf.gui.hPbEvalExtFeatVis, ...
%                                 'Visible','Off', ...
%                                 'Enable', 'on', ...
%                                 'String','Show:LFP')
%                              set(hSelf.gui.hPbEvalTestDeco, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalTestDeco, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalTestAcc, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalTrainValTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalConfMatTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%                             set(hSelf.gui.hPbEvalConfMatTrainValTest, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
% 
%                             
%                             
%                         %Write code for all of possible reasons here
%                         %for example: Case 'UnsortedSpikes' and thats
%                         %it
%                     end
%                 case 'Online'
%                     msgbox('For now, Select only offline mode')
%                     set(hSelf.gui.hTxtEvalDataParam1, ...
%                         'Visible','off',...
%                         'String', 'Neural(Spikes)&BehavData')
%                     set(hSelf.gui.hPbEvalDataParam1, ...
%                         'Visible','off', ...
%                         'String', 'Browse')
%                     set(hSelf.gui.hTxtEvalDataParam2, ...
%                         'Visible','off', ...
%                         'String', 'TrailIndices')
%                     set(hSelf.gui.hEditEvalDataParam2, ...
%                         'Visible','off', ...
%                         'String','[ ]')
%                     set(hSelf.gui.hPbEvalRawData, ...
%                         'Visible','on', ...
%                         'Enable','off', ...
%                         'String','PlotRawData(UnsortedSpikes)')
%                      set(hSelf.gui.hPbEvalTestDeco, ...
%                                 'Visible','On', ...
%                                 'Enable', 'on');
%             end
%             
%            
%             
%             
%         end
        
    end
end